<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.szcti.lcloud.catalog.repository.SysMarcRepository">
  <resultMap id="BaseResultMap" type="com.szcti.lcloud.catalog.entity.SysMarc">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="designator" jdbcType="TINYINT" property="designator" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="create_by" jdbcType="BIGINT" property="createBy" />
    <result column="library_id" jdbcType="BIGINT" property="libraryId" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="must_values" jdbcType="VARCHAR" property="mustValues" />
    <result column="select_values" jdbcType="VARCHAR" property="selectValues" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, description, name, designator, status, create_date, create_by, library_id, remarks, 
    must_values, select_values
  </sql>
  <select id="selectByExample" parameterType="com.szcti.lcloud.catalog.entity.SysMarcCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sys_marc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sys_marc
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sys_marc
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.szcti.lcloud.catalog.entity.SysMarc">
    insert into sys_marc (id, description, name, 
      designator, status, create_date, 
      create_by, library_id, remarks, 
      must_values, select_values)
    values (#{id,jdbcType=BIGINT}, #{description,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{designator,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}, #{createDate,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=BIGINT}, #{libraryId,jdbcType=BIGINT}, #{remarks,jdbcType=VARCHAR}, 
      #{mustValues,jdbcType=VARCHAR}, #{selectValues,jdbcType=VARCHAR})
  </insert>
 <update id="updateByPrimaryKey" parameterType="com.szcti.lcloud.catalog.entity.SysMarc">
    update sys_marc
    set description = #{description,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      designator = #{designator,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=BIGINT},
      library_id = #{libraryId,jdbcType=BIGINT},
      remarks = #{remarks,jdbcType=VARCHAR},
      must_values = #{mustValues,jdbcType=VARCHAR},
      select_values = #{selectValues,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>